/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hdrapp;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import static org.opencv.core.CvType.*;
import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.photo.AlignMTB;
import org.opencv.photo.CalibrateDebevec;
import org.opencv.photo.MergeDebevec;
import org.opencv.photo.MergeMertens;
import org.opencv.photo.Photo;
import static org.opencv.photo.Photo.createAlignMTB;
import org.opencv.photo.Tonemap;
import org.opencv.photo.TonemapDrago;
import org.opencv.photo.TonemapDurand;
import org.opencv.photo.TonemapMantiuk;
import org.opencv.photo.TonemapReinhard;

/**
 *
 * @author Raquel Escalante
 * @author Rafael Vasquez
 */
public class HDRGUI extends javax.swing.JFrame {

    private final JFileChooser fcOpenPic;
    private final JFileChooser fcSavePic;
    private LoadDialog ld;
    private JPanel imgSecPanel;
    private JLabel HDRImageLabel;
    private BufferedImage HDRImage;
    private String ToneMap;

    /**
     * Creates new form HDRGUI
     */
    public HDRGUI() {
        initComponents();
        fcOpenPic = new JFileChooser();
        fcSavePic = new JFileChooser();
        FileNameExtensionFilter imagesFilter = new FileNameExtensionFilter("Imágenes: *.bmp, *.jpg, *.png", "bmp", "jpg", "png");
        fcOpenPic.addChoosableFileFilter(imagesFilter);
        fcOpenPic.setFileFilter(imagesFilter);
        ld = new LoadDialog(this, true);
        imgSecPanel = null;
        HDRImageLabel = new JLabel();
        ToneMap = "Reinhard";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HDRSelectionGroup = new javax.swing.ButtonGroup();
        BarraEstadoPanel = new javax.swing.JPanel();
        BarraEstado = new javax.swing.JPanel();
        Estado = new javax.swing.JLabel();
        AppPanel = new javax.swing.JPanel();
        BotonCargar = new javax.swing.JButton();
        SecImagenesScrollPane = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        NumeroSecuencia = new javax.swing.JSpinner();
        CargaEtiqueta = new javax.swing.JLabel();
        GenerarPanel = new javax.swing.JPanel();
        HDRTradButton = new javax.swing.JRadioButton();
        ExpFusionButton = new javax.swing.JRadioButton();
        GenerarButton = new javax.swing.JButton();
        ModoEtiqueta = new javax.swing.JLabel();
        ImgFPanel = new javax.swing.JPanel();
        HDRScrollPane = new javax.swing.JScrollPane();
        BarraMenu = new javax.swing.JMenuBar();
        MenuArchivo = new javax.swing.JMenu();
        GuardarImagen = new javax.swing.JMenuItem();
        MenuOpciones = new javax.swing.JMenu();
        MapeoTonos = new javax.swing.JMenuItem();
        MenuAyuda = new javax.swing.JMenu();
        Leeme = new javax.swing.JMenuItem();
        AcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generador de imágenes HDR | Por Rafael Vasquez y Raquel Escalante");

        BarraEstado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Estado.setText("Bienvenido");

        javax.swing.GroupLayout BarraEstadoLayout = new javax.swing.GroupLayout(BarraEstado);
        BarraEstado.setLayout(BarraEstadoLayout);
        BarraEstadoLayout.setHorizontalGroup(
            BarraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BarraEstadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Estado)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        BarraEstadoLayout.setVerticalGroup(
            BarraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BarraEstadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Estado)
                .addContainerGap())
        );

        javax.swing.GroupLayout BarraEstadoPanelLayout = new javax.swing.GroupLayout(BarraEstadoPanel);
        BarraEstadoPanel.setLayout(BarraEstadoPanelLayout);
        BarraEstadoPanelLayout.setHorizontalGroup(
            BarraEstadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BarraEstadoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BarraEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        BarraEstadoPanelLayout.setVerticalGroup(
            BarraEstadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BarraEstadoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BarraEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        BotonCargar.setText("Cargar imágenes de secuencia");
        BotonCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCargarActionPerformed(evt);
            }
        });

        jLabel2.setText("Número de imágenes:");

        NumeroSecuencia.setModel(new javax.swing.SpinnerNumberModel(3, 3, 5, 1));

        CargaEtiqueta.setText("Carga de imágenes para procesar:");

        HDRSelectionGroup.add(HDRTradButton);
        HDRTradButton.setSelected(true);
        HDRTradButton.setText("HDR Tradicional");
        HDRTradButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        HDRSelectionGroup.add(ExpFusionButton);
        ExpFusionButton.setText("Fusión de Exposición");
        ExpFusionButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        GenerarButton.setText("Generar imagen HDR");
        GenerarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerarButtonActionPerformed(evt);
            }
        });

        ModoEtiqueta.setText("Modo:");
        ModoEtiqueta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        ImgFPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout ImgFPanelLayout = new javax.swing.GroupLayout(ImgFPanel);
        ImgFPanel.setLayout(ImgFPanelLayout);
        ImgFPanelLayout.setHorizontalGroup(
            ImgFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HDRScrollPane)
        );
        ImgFPanelLayout.setVerticalGroup(
            ImgFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HDRScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout GenerarPanelLayout = new javax.swing.GroupLayout(GenerarPanel);
        GenerarPanel.setLayout(GenerarPanelLayout);
        GenerarPanelLayout.setHorizontalGroup(
            GenerarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GenerarPanelLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(ModoEtiqueta, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HDRTradButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ExpFusionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(GenerarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
            .addGroup(GenerarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ImgFPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        GenerarPanelLayout.setVerticalGroup(
            GenerarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GenerarPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(GenerarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExpFusionButton)
                    .addComponent(GenerarButton)
                    .addComponent(ModoEtiqueta)
                    .addComponent(HDRTradButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ImgFPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout AppPanelLayout = new javax.swing.GroupLayout(AppPanel);
        AppPanel.setLayout(AppPanelLayout);
        AppPanelLayout.setHorizontalGroup(
            AppPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AppPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AppPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GenerarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(AppPanelLayout.createSequentialGroup()
                        .addGroup(AppPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CargaEtiqueta)
                            .addComponent(BotonCargar)
                            .addGroup(AppPanelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(NumeroSecuencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SecImagenesScrollPane)))
                .addContainerGap())
        );
        AppPanelLayout.setVerticalGroup(
            AppPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AppPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AppPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AppPanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(CargaEtiqueta)
                        .addGap(18, 18, 18)
                        .addGroup(AppPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(NumeroSecuencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(BotonCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(SecImagenesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GenerarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        MenuArchivo.setText("Archivo");

        GuardarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hdrapp/Save16.gif"))); // NOI18N
        GuardarImagen.setText("Guardar Archivo");
        GuardarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarImagenActionPerformed(evt);
            }
        });
        MenuArchivo.add(GuardarImagen);

        BarraMenu.add(MenuArchivo);

        MenuOpciones.setText("Opciones");

        MapeoTonos.setText("Mapeo de Tonos");
        MapeoTonos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapeoTonosActionPerformed(evt);
            }
        });
        MenuOpciones.add(MapeoTonos);

        BarraMenu.add(MenuOpciones);

        MenuAyuda.setText("Ayuda");

        Leeme.setText("Léeme");
        Leeme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeemeActionPerformed(evt);
            }
        });
        MenuAyuda.add(Leeme);

        AcercaDe.setText("Acerca De...");
        AcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcercaDeActionPerformed(evt);
            }
        });
        MenuAyuda.add(AcercaDe);

        BarraMenu.add(MenuAyuda);

        setJMenuBar(BarraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BarraEstadoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AppPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AppPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BarraEstadoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public BufferedImage mat2Img(Mat in){
        BufferedImage out = new BufferedImage(in.width(), in.height(), BufferedImage.TYPE_3BYTE_BGR);
        byte[] data = ((DataBufferByte) out.getRaster().getDataBuffer()).getData();
        in.get(0, 0, data);
        return out;
    }

    private String getSelectedButtonText(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();
            if (button.isSelected()) {
                return button.getText();
            }
        }
        return null;
    }

    private void updateHDRImageGUI(BufferedImage imgMsc){
        int mWidth, mHeight;
        if(imgMsc.getWidth() > imgMsc.getHeight()){
            mWidth = HDRScrollPane.getWidth() - 10;
            mHeight = (int)(((double)mWidth / (double)imgMsc.getWidth()) * (double)imgMsc.getHeight());
        }else{
            mHeight = HDRScrollPane.getHeight() - 10;
            mWidth = (int)(((double)mHeight / (double)imgMsc.getHeight()) * (double)imgMsc.getWidth());
        }

        BufferedImage myResize = new BufferedImage(mWidth, mHeight, imgMsc.getType());
        Graphics2D g = myResize.createGraphics();
        g.drawImage(imgMsc, 0, 0, mWidth, mHeight, null);
        g.dispose();

        ImageIcon icon = new ImageIcon(myResize);
        // Adding the ImageIcon to the Label.
        HDRImageLabel.setIcon( icon );
        //Aligning the image to the center.
        HDRImageLabel.setHorizontalAlignment(JLabel.CENTER);
        //Adding the label to the Scrolling pane.
        HDRScrollPane.getViewport().add(HDRImageLabel);
        // Repainting the scroll pane to update the changes
        HDRScrollPane.repaint();
    }

    private Tonemap getCurrentTonemap(){
        Tonemap mytm = null;
        switch(ToneMap){
            case "Reinhard":
                mytm = Photo.createTonemapReinhard();
                break;
            case "Drago":
                mytm = Photo.createTonemapDrago();
                mytm.setGamma(1.5f);
                break;
            case "Durand":
                mytm = Photo.createTonemapDurand();
                mytm.setGamma(2.2f);
                break;
            case "Mantiuk":
                mytm = Photo.createTonemapMantiuk();
                mytm.setGamma(2.0f);
                break;
        }

        return mytm;
    }

    private void TraditionalHDR(){     
        //Create first a Mat for Camera Response Function, and a Debevec calibrator
        Mat response = new Mat();
        CalibrateDebevec calibrate = Photo.createCalibrateDebevec();
        Mat matTimes = new Mat(ld.myExpTimes.size(), 1, CvType.CV_32F);
        double[] arrayTimes = new double[(int) (matTimes.total()*matTimes.channels())];
        for (int i = 0; i < ld.myExpTimes.size(); i++) {
            arrayTimes[i] = ld.myExpTimes.get(i);
        }

        //Calibrate the images according to CRF using the Debevec Calibrator
        matTimes.put(0, 0, arrayTimes);
        calibrate.process(ld.myImages, response, matTimes);

        //Aligning process
        AlignMTB myAlign = createAlignMTB();
        myAlign.process(ld.myImages  , ld.myImages);

        //HDR image creation
        Mat hdr = new Mat();
        MergeDebevec mergeDebevec = Photo.createMergeDebevec();
        mergeDebevec.process(ld.myImages, hdr, matTimes);

        //LDR image creation
        Mat ldr = new Mat();
//        TonemapDrago tonemap = Photo.createTonemapDrago();
//        TonemapReinhard tonemap = Photo.createTonemapReinhard();
        Tonemap tonemap = getCurrentTonemap();
        //tonemap.setGamma(2.2f);
        tonemap.process(hdr, ldr);
        
        //Final Image Processing
        ldr = ldr.mul(ldr, 255);
        ldr.convertTo(ldr, CV_8UC3);
        HDRImage = mat2Img(ldr);

    }

    private void Mertens(){
        Mat fusion = new Mat();
        MergeMertens mergeMertens = Photo.createMergeMertens();
        AlignMTB myAlign = createAlignMTB();
        myAlign.process(ld.myImages  , ld.myImages);
        mergeMertens.process(ld.myImages, fusion);
        fusion = fusion.mul(fusion, 255);
//        Imgcodecs.imwrite("fusion.jpg", fusion);
        fusion.convertTo(fusion, CV_8UC3);
//        Imgcodecs.imwrite("fusion_rgb.jpg", fusion);
        HDRImage = mat2Img(fusion);
    }

    private void BotonCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCargarActionPerformed
        int n = (int)NumeroSecuencia.getValue();
        ld.setFileChooser(fcOpenPic);
        ld.setChoosers(n);
        if(imgSecPanel != null){
            ld.setImageSequencePanel(imgSecPanel);
        }
        //Displaying JDialog to load Images
        ld.setVisible(true);
        // Updating the image sequence in the main GUI
        imgSecPanel = ld.getImageSequencePanel();
        SecImagenesScrollPane.getViewport().add(imgSecPanel);
        SecImagenesScrollPane.repaint();
        Estado.setText("Imágenes de secuencia cargadas.");
    }//GEN-LAST:event_BotonCargarActionPerformed

    private void GenerarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerarButtonActionPerformed
        Estado.setText("Aplicando HDR.");
        switch(getSelectedButtonText(HDRSelectionGroup)){
            case "HDR Tradicional":
                TraditionalHDR();
                updateHDRImageGUI(HDRImage);
                Estado.setText("HDR Tradicional aplicado.");
                break;
            case "Fusión de Exposición":                
                Mertens();
                updateHDRImageGUI(HDRImage);
                Estado.setText("Fusión de exposición aplicada.");
                break;
        }
    }//GEN-LAST:event_GenerarButtonActionPerformed

    private void LeemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeemeActionPerformed
        Runtime rt = Runtime.getRuntime();
        String readme = ("README.txt");
        try {
            Process p = rt.exec("notepad "+readme);
        } catch (IOException ex) {
            Logger.getLogger(HDRGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_LeemeActionPerformed

    private void AcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcercaDeActionPerformed
        JOptionPane.showMessageDialog(this, "Generador de Imágenes HDR\nRaquel Escalante y Rafael Vasquez\nSemestre 2-2017\nProcesamiento Digital De Imágenes", "Acerca de", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_AcercaDeActionPerformed

    private void GuardarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarImagenActionPerformed
        int returnVal;
        if ( HDRImage != null ){
            returnVal = fcSavePic.showSaveDialog(this);
        }else{
            JOptionPane.showMessageDialog(this, "¡ERROR: Debe generar una imagen HDR primero!");
            return;
        }
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fcSavePic.getSelectedFile();
                // Getting the image extension.
                String path = file.getAbsolutePath();
                String extension = path.substring(path.length() - 3);
                if ("bmp".equals(extension) || "png".equals(extension) || "jpg".equals(extension)){
                    ImageIO.write(HDRImage, extension, new File(fcSavePic.getSelectedFile().getAbsolutePath()));
                    Estado.setText("Imagen guardada en: " + fcSavePic.getSelectedFile().getAbsolutePath());
                }
            } catch ( IOException e) {
                JOptionPane.showMessageDialog(this, "¡ERROR: Ocurrio un error al guardar el archivo!");
            }
        }
    }//GEN-LAST:event_GuardarImagenActionPerformed

    private void MapeoTonosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MapeoTonosActionPerformed
        JRadioButton DurandButton = new JRadioButton("Durand");
        JRadioButton ReinhardButton = new JRadioButton("Reinhard");
        JRadioButton DragoButton = new JRadioButton("Drago");
        JRadioButton MantiukButton = new JRadioButton("Mantiuk");
        ButtonGroup tonemapBGroup = new ButtonGroup();
        JPanel panel1 = new JPanel();

        tonemapBGroup.add(DurandButton);
        tonemapBGroup.add(ReinhardButton);
        tonemapBGroup.add(DragoButton);
        tonemapBGroup.add(MantiukButton);

        switch(ToneMap){
            case "Reinhard":
                ReinhardButton.setSelected(true);
                break;
            case "Drago":
                DragoButton.setSelected(true);
                break;
            case "Durand":
                DurandButton.setSelected(true);
                break;
            case "Mantiuk":
                MantiukButton.setSelected(true);
                break;
        }

        panel1.add(DurandButton);
        panel1.add(MantiukButton);
        panel1.add(DragoButton);
        panel1.add(ReinhardButton);

        Object[] params = {"Filtros de Mapeo de Tonos:", panel1};
        Object[] options = {"Aceptar", "Cancelar"};
        int result = JOptionPane.showOptionDialog(  HDRScrollPane,
            params,
            "Opciones de Mapeo de Tono",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,           // Don't use a custom Icon
            options,        // The strings of buttons
            options[0]);    // Default button title

        //If the operation was canceled do nothing.
        if (result == JOptionPane.NO_OPTION){
            return;
        }
        ToneMap = getSelectedButtonText( tonemapBGroup );
        Estado.setText("Mapeo de Tonos Actual: " + ToneMap);
    }//GEN-LAST:event_MapeoTonosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HDRGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new HDRGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AcercaDe;
    private javax.swing.JPanel AppPanel;
    private javax.swing.JPanel BarraEstado;
    private javax.swing.JPanel BarraEstadoPanel;
    private javax.swing.JMenuBar BarraMenu;
    private javax.swing.JButton BotonCargar;
    private javax.swing.JLabel CargaEtiqueta;
    private javax.swing.JLabel Estado;
    private javax.swing.JRadioButton ExpFusionButton;
    private javax.swing.JButton GenerarButton;
    private javax.swing.JPanel GenerarPanel;
    private javax.swing.JMenuItem GuardarImagen;
    private javax.swing.JScrollPane HDRScrollPane;
    private javax.swing.ButtonGroup HDRSelectionGroup;
    private javax.swing.JRadioButton HDRTradButton;
    private javax.swing.JPanel ImgFPanel;
    private javax.swing.JMenuItem Leeme;
    private javax.swing.JMenuItem MapeoTonos;
    private javax.swing.JMenu MenuArchivo;
    private javax.swing.JMenu MenuAyuda;
    private javax.swing.JMenu MenuOpciones;
    private javax.swing.JLabel ModoEtiqueta;
    private javax.swing.JSpinner NumeroSecuencia;
    private javax.swing.JScrollPane SecImagenesScrollPane;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
